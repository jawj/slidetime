// Generated by CoffeeScript 1.10.0
var TimerMaker, body, fontChooser, fontSizeChooser, redrawPreview, sampleText, tm;

TimerMaker = (function() {
  TimerMaker.prototype.soundOptions = {
    gong: {
      file: 'gong.wav',
      length: 6
    },
    ding: {
      file: 'chime.wav',
      length: 3
    },
    echo: {
      file: 'echo.wav',
      length: 3
    },
    alarm: {
      file: 'alarm.wav',
      length: 3
    }
  };

  TimerMaker.prototype.encSettingsOptions = {
    mpeg1: {
      videocodec: '-c:v mpeg1video -q:v 4',
      audiocodec: '-c:a mp2 -b:a 64k',
      format: '-f mpeg',
      inframerate: 1,
      framerate: 25,
      audiolag: -1,
      ext: 'mpg'
    },
    mp4: {
      videocodec: '-c:v mpeg4 -q:v 1',
      audiocodec: '-c:a aac -q:a 6',
      format: '-f mp4',
      inframerate: 1,
      framerate: 1,
      audiolag: 0,
      ext: 'mp4'
    },
    avi: {
      videocodec: '-c:v mpeg4 -q:v 1',
      audiocodec: ' -c:a aac -q:a 6',
      format: '-f avi',
      inframerate: 1,
      framerate: 1,
      audiolag: 1,
      ext: 'avi'
    }
  };

  TimerMaker.prototype.timerSeconds = 10800;

  TimerMaker.prototype.warnSeconds = 10;

  TimerMaker.prototype.fontSize = 60;

  TimerMaker.prototype.fontStyle = 'bold';

  TimerMaker.prototype.fontFace = 'Myriad Pro';

  TimerMaker.prototype.colors = {
    main: {
      fg: '#000000',
      bg: '#ffffff'
    },
    warn: {
      fg: '#000000',
      bg: '#ffff00'
    },
    last: {
      fg: '#ffff00',
      bg: '#000000'
    }
  };

  TimerMaker.prototype.encSettings = TimerMaker.prototype.encSettingsOptions.mp4;

  TimerMaker.prototype.sound = TimerMaker.prototype.soundOptions.ding;

  TimerMaker.prototype.zeroPad = function(s, len) {
    s += '';
    while (s.length < len) {
      s = '0' + s;
    }
    return s;
  };

  TimerMaker.prototype.formatTime = function(seconds, maxSeconds, output) {
    var h, m, maxH, maxM, maxS, s;
    if (output == null) {
      output = '';
    }
    h = Math.floor(seconds / 3600);
    m = Math.floor(seconds % 3600 / 60);
    s = seconds % 60;
    maxH = Math.floor(maxSeconds / 3600);
    maxM = Math.floor(maxSeconds % 3600 / 60);
    maxS = maxSeconds % 60;
    if (maxH > 0) {
      output += this.zeroPad(h, (maxH + '').length) + ':';
    }
    output += this.zeroPad(m, (maxH === 0 && maxM < 10 ? 1 : 2)) + ':';
    output += this.zeroPad(s, 2);
    return output;
  };

  TimerMaker.prototype.prepareCanvas = function() {
    var canvasHeight, canvasWidth, font, textWidth, zeroCanvas, zeroCtx;
    font = this.fontStyle + " " + this.fontSize + "px " + this.fontFace;
    zeroCanvas = document.createElement('canvas');
    zeroCtx = zeroCanvas.getContext('2d');
    zeroCtx.font = font;
    textWidth = zeroCtx.measureText(this.formatTime(0, this.timerSeconds)).width;
    this.textHeight = this.fontSize * 0.86;
    this.padding = this.textHeight * 0.12;
    canvasWidth = this.textHeight + textWidth + this.padding * 4;
    if (canvasWidth % 16 > 0) {
      canvasWidth += 16 - (canvasWidth % 16);
    }
    canvasHeight = this.textHeight + this.padding * 2;
    if (canvasHeight % 16 > 0) {
      canvasHeight += 16 - (canvasHeight % 16);
    }
    if (this.canvas) {
      this.canvas.width = canvasWidth;
      this.canvas.height = canvasHeight;
    } else {
      this.canvas = make({
        tag: 'canvas',
        width: canvasWidth,
        height: canvasHeight
      });
    }
    this.ctx = this.canvas.getContext('2d');
    this.ctx.font = font;
    return this;
  };

  TimerMaker.prototype.drawClock = function(i) {
    var bgCol, clockCenter, clockInnerRadius, clockOuterRadius, colType, endAngle, fgCol, startAngle;
    colType = i === 0 ? 'last' : i <= this.warnSeconds ? 'warn' : 'main';
    bgCol = this.colors[colType].bg;
    fgCol = this.colors[colType].fg;
    clockOuterRadius = this.textHeight * 0.5;
    clockInnerRadius = clockOuterRadius * 0.9;
    clockCenter = clockOuterRadius + this.padding;
    this.ctx.fillStyle = bgCol;
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.fillStyle = fgCol;
    this.ctx.fillText(this.formatTime(i, this.timerSeconds), this.textHeight + this.padding * 3, this.textHeight * 0.93 + this.padding);
    this.ctx.fillStyle = fgCol;
    this.ctx.beginPath();
    this.ctx.arc(clockCenter, clockCenter, clockOuterRadius, 0, 2 * Math.PI, true);
    this.ctx.fill();
    this.ctx.strokeStyle = bgCol;
    this.ctx.lineWidth = clockInnerRadius;
    this.ctx.beginPath();
    startAngle = i === 0 ? 0 : 2 * Math.PI * (1 - i / this.timerSeconds) - 0.5 * Math.PI;
    endAngle = i === 0 ? Math.PI * 2 : Math.PI * 1.49999;
    this.ctx.arc(clockCenter, clockCenter, clockInnerRadius * 0.5, startAngle, endAngle, true);
    this.ctx.stroke();
    return this;
  };

  TimerMaker.prototype.makeMovie = function(soundData) {
    var callback, i, iTarget;
    this.prepareCanvas();
    this.mm.setSource(this.canvas, this.ctx, this.encSettings, soundData, this.timerSeconds);
    i = this.timerSeconds;
    iTarget = this.sound ? -this.sound.length : 0;
    callback = (function(_this) {
      return function() {
        if (i >= iTarget) {
          if (i >= 0) {
            _this.drawClock(i);
          }
          i -= 1;
          return _this.mm.addFrame(callback);
        } else {
          return _this.mm.encode();
        }
      };
    })(this);
    callback();
    return this;
  };

  TimerMaker.prototype.start = function() {
    if (this.sound) {
      return xhr({
        url: this.sound.file,
        type: 'arraybuffer',
        success: (function(_this) {
          return function(req) {
            var soundData;
            soundData = req.response;
            return _this.makeMovie(soundData);
          };
        })(this)
      });
    } else {
      return this.makeMovie();
    }
  };

  function TimerMaker() {
    this.mm = new CanvasMovieMaker();
    this.mm.on('starting', function(args) {
      return console.log("starting with arguments: " + (args.join(' ')));
    });
    this.mm.on('stderr', function(data) {
      return console.log(data);
    });
    this.mm.on('frame', (function(_this) {
      return function(frame) {
        var completionMsg;
        completionMsg = (Math.floor(frame / (_this.mm.frameCount * _this.encSettings.framerate) * 100)) + "% completed";
        (get({
          id: 'completed'
        })).innerHTML = completionMsg;
        return console.log(completionMsg);
      };
    })(this));
    this.mm.on('done', (function(_this) {
      return function(buffer) {
        var filename, link, videoURL;
        if (buffer == null) {
          return;
        }
        filename = "slidetime." + _this.encSettings.ext;
        videoURL = navigator.vendor === 'Apple Computer, Inc.' ? 'data:video/mp4;base64,' + b64(new Uint8Array(buffer)) : URL.createObjectURL(new Blob([buffer]));
        return link = make({
          tag: 'a',
          download: filename,
          text: 'Download',
          href: videoURL,
          parent: get({
            tag: 'body'
          }),
          onclick: function() {
            if (navigator.msSaveOrOpenBlob != null) {
              navigator.msSaveOrOpenBlob(new Blob([buffer]), filename);
              return false;
            }
          }
        });
      };
    })(this));
  }

  return TimerMaker;

})();

body = get({
  tag: 'body'
});

sampleText = '16:03';

fontChooser = FontChooser(sampleText, 250, [], function(font) {
  var j, len1, ref, results, sample;
  ref = get({
    cls: 'fc-sample',
    inside: fontSizeChooser.dropdown
  });
  results = [];
  for (j = 0, len1 = ref.length; j < len1; j++) {
    sample = ref[j];
    sample.style.fontFamily = font;
    results.push(redrawPreview());
  }
  return results;
});

body.appendChild(fontChooser.input);

fontSizeChooser = FontSizeChooser(sampleText, null, null, function(size) {
  return redrawPreview();
});

body.appendChild(fontSizeChooser.input);

tm = new TimerMaker();

redrawPreview = function() {
  var oldCanvas, parent;
  tm.fontFace = fontChooser.input.value;
  tm.fontSize = 0 + fontSizeChooser.input.value;
  tm.prepareCanvas();
  tm.drawClock(tm.timerSeconds);
  parent = get({
    id: 'sampleCanvasParent'
  });
  oldCanvas = parent.lastChild;
  if (oldCanvas != null) {
    parent.removeChild(oldCanvas);
  }
  return parent.appendChild(tm.canvas);
};

make({
  tag: 'button',
  text: 'Render movie',
  parent: body,
  onclick: function() {
    return tm.start();
  }
});

//# sourceMappingURL=slidetime.js.map
