// Generated by CoffeeScript 1.8.0
var LocalFonts,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

this.Dropdown = (function() {
  Dropdown.prototype.scrollGap = 10;

  function Dropdown(input, dropdown, callback) {
    this.input = input;
    this.dropdown = dropdown;
    this.callback = callback;
    this.resize = __bind(this.resize, this);
    this.hideSoon = __bind(this.hideSoon, this);
    this.hide = __bind(this.hide, this);
    this.show = __bind(this.show, this);
    this.update = __bind(this.update, this);
    this.inputKeyListener = __bind(this.inputKeyListener, this);
    this.dropdownMouseListener = __bind(this.dropdownMouseListener, this);
    this.dropdownClickListener = __bind(this.dropdownClickListener, this);
    this.input.addEventListener('focus', this.show);
    this.input.addEventListener('blur', this.hideSoon);
    this.dropdown.addEventListener('click', this.dropdownClickListener);
    this.dropdown.addEventListener('mouseover', this.dropdownMouseListener);
    this.input.addEventListener('keydown', this.inputKeyListener);
  }

  Dropdown.prototype.dropdownClickListener = function(e) {
    return this.update();
  };

  Dropdown.prototype.dropdownMouseListener = function(e) {
    var row, rows, targetRow, _i, _len;
    targetRow = this.findAncestor(e.target, function(node) {
      return cls(node, {
        has: 'fc-row'
      });
    });
    if (targetRow) {
      rows = get({
        cls: 'fc-row',
        inside: this.dropdown
      });
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        if (row === targetRow) {
          cls(row, {
            add: 'fc-highlighted'
          });
        } else {
          cls(row, {
            remove: 'fc-highlighted'
          });
        }
      }
      return this.scrollHighlightedIntoView();
    }
  };

  Dropdown.prototype.inputKeyListener = function(e) {
    var change, i, kc, newIndex, oldIndex, row, rows, _i, _len;
    kc = e.keyCode;
    if (kc !== 13 && kc !== 38 && kc !== 40) {
      return;
    }
    e.preventDefault();
    if (kc === 13) {
      this.update();
      this.input.blur();
      return;
    }
    change = kc === 38 ? -1 : kc === 40 ? 1 : void 0;
    oldIndex = -1;
    rows = get({
      cls: 'fc-row',
      inside: this.dropdown
    });
    for (i = _i = 0, _len = rows.length; _i < _len; i = ++_i) {
      row = rows[i];
      if (cls(row, {
        has: 'fc-highlighted'
      })) {
        oldIndex = i;
        break;
      }
    }
    newIndex = oldIndex + change;
    if (newIndex < 0) {
      newIndex = rows.length - 1;
    }
    if (newIndex >= rows.length) {
      newIndex = 0;
    }
    if (oldIndex >= 0) {
      cls(rows[oldIndex], {
        remove: 'fc-highlighted'
      });
    }
    cls(rows[newIndex], {
      add: 'fc-highlighted'
    });
    return this.scrollHighlightedIntoView();
  };

  Dropdown.prototype.scrollHighlightedIntoView = function() {
    var ddVisBtm, ddVisTop, row, rowBtm, rowTop;
    row = (get({
      cls: 'fc-highlighted',
      inside: this.dropdown
    }))[0];
    ddVisTop = this.dropdown.scrollTop + this.scrollGap;
    ddVisBtm = this.dropdown.scrollTop + this.dropdown.clientHeight - this.scrollGap;
    rowTop = row.offsetTop;
    rowBtm = rowTop + row.clientHeight;
    if (rowTop < ddVisTop) {
      this.dropdown.scrollTop = rowTop - this.scrollGap;
    }
    if (rowBtm > ddVisBtm) {
      return this.dropdown.scrollTop = rowBtm - this.dropdown.clientHeight + this.scrollGap;
    }
  };

  Dropdown.prototype.update = function() {
    var value, valueNode;
    valueNode = (get({
      cls: 'fc-highlighted',
      inside: this.dropdown
    }))[0];
    if (valueNode) {
      value = valueNode.getAttribute('data-dropdown-value');
      this.input.value = value;
      return this.callback(value);
    }
  };

  Dropdown.prototype.show = function() {
    this.dropdown.style.display = 'block';
    this.resize();
    window.addEventListener('scroll', this.resize);
    return window.addEventListener('resize', this.resize);
  };

  Dropdown.prototype.hide = function() {
    this.dropdown.style.display = 'none';
    window.removeEventListener('scroll', this.resize);
    return window.removeEventListener('resize', this.resize);
  };

  Dropdown.prototype.hideSoon = function() {
    return setTimeout(this.hide, 150);
  };

  Dropdown.prototype.resize = function() {
    var dropdownHeight, dropdownPageY, inputPageX, inputWinRect, winHeight;
    winHeight = window.innerHeight;
    inputWinRect = this.input.getBoundingClientRect();
    inputPageX = inputWinRect.left + window.scrollX;
    if (inputWinRect.top > winHeight / 2) {
      dropdownPageY = window.scrollY + 1;
      dropdownHeight = inputWinRect.top - 5;
    } else {
      dropdownPageY = inputWinRect.bottom + window.scrollY + 1;
      dropdownHeight = winHeight - inputWinRect.bottom - 10;
    }
    this.dropdown.style.top = dropdownPageY + 'px';
    this.dropdown.style.left = inputPageX + 'px';
    return this.dropdown.style.height = dropdownHeight + 'px';
  };

  Dropdown.prototype.findAncestor = function(node, callback) {
    if (!node) {
      return null;
    }
    if (callback(node)) {
      return node;
    }
    return this.findAncestor(node.parentNode, callback);
  };

  Dropdown.prototype.findAncestorResult = function(node, callback) {
    var result;
    if (!node) {
      return null;
    }
    result = callback(node);
    if (result) {
      return result;
    }
    return this.findAncestorResult(node.parentNode, callback);
  };

  return Dropdown;

})();

this.FontChooser = function(sampleText, width, extraCandidates, callback) {
  var chooser, cont, font, fonts, localFonts, row, sample, title, _i, _len;
  if (sampleText == null) {
    sampleText = 'Aa Bb Cc';
  }
  if (width == null) {
    width = 250;
  }
  chooser = make({
    tag: 'input',
    cls: 'fc-chooser',
    value: 'Helvetica Neue',
    style: {
      width: "" + width + "px"
    }
  });
  cont = make({
    parent: get({
      tag: 'body'
    }),
    cls: 'fc-container',
    style: {
      width: "" + width + "px"
    }
  });
  localFonts = new LocalFonts();
  fonts = localFonts.listCommonInstalled(extraCandidates);
  for (_i = 0, _len = fonts.length; _i < _len; _i++) {
    font = fonts[_i];
    row = make({
      parent: cont,
      cls: 'fc-row',
      attrs: {
        'data-dropdown-value': font
      }
    });
    sample = make({
      parent: row,
      cls: 'fc-sample',
      text: sampleText,
      style: {
        fontFamily: font
      }
    });
    title = make({
      parent: row,
      cls: 'fc-title',
      text: font
    });
  }
  return new Dropdown(chooser, cont, callback != null ? callback : (function() {}));
};

this.FontSizeChooser = function(sampleText, width, sizes, callback) {
  var chooser, cont, row, sample, size, title, _i, _len;
  if (sampleText == null) {
    sampleText = 'Aa Bb Cc';
  }
  if (width == null) {
    width = 250;
  }
  if (sizes == null) {
    sizes = [12, 14, 18, 24, 36, 48, 60, 72, 96, 144, 288];
  }
  chooser = make({
    tag: 'input',
    cls: 'fc-chooser',
    value: '60',
    style: {
      width: "50px"
    }
  });
  cont = make({
    parent: get({
      tag: 'body'
    }),
    cls: 'fc-container',
    style: {
      width: "" + width + "px"
    }
  });
  for (_i = 0, _len = sizes.length; _i < _len; _i++) {
    size = sizes[_i];
    row = make({
      parent: cont,
      cls: 'fc-row',
      attrs: {
        'data-dropdown-value': size
      }
    });
    sample = make({
      parent: row,
      cls: 'fc-sample',
      text: sampleText,
      style: {
        fontSize: "" + size + "pt"
      }
    });
    title = make({
      parent: row,
      cls: 'fc-title',
      text: size
    });
  }
  return new Dropdown(chooser, cont, callback != null ? callback : (function() {}));
};

LocalFonts = (function() {
  function LocalFonts() {}

  LocalFonts.prototype.listInstalled = function(candidateFonts) {
    var baseFont, body, candidateFont, installedFonts, span, widths, _i, _len;
    body = get({
      tag: 'body'
    });
    span = make({
      tag: 'span',
      text: 'iii',
      style: {
        fontSize: '16px',
        visibility: 'hidden'
      },
      parent: body
    });
    installedFonts = [];
    for (_i = 0, _len = candidateFonts.length; _i < _len; _i++) {
      candidateFont = candidateFonts[_i];
      widths = (function() {
        var _j, _len1, _ref, _results;
        _ref = ['serif', 'monospace'];
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          baseFont = _ref[_j];
          span.style.fontFamily = "'" + candidateFont + "', " + baseFont;
          _results.push(span.offsetWidth);
        }
        return _results;
      })();
      if (widths[0] === widths[1]) {
        installedFonts.push(candidateFont);
      }
    }
    body.removeChild(span);
    return installedFonts.sort();
  };

  LocalFonts.prototype.listCommonInstalled = function(extraCandidates) {
    if (extraCandidates == null) {
      extraCandidates = [];
    }
    return this.listInstalled(this.candidateFonts.concat(extraCandidates));
  };

  LocalFonts.prototype.isInstalled = function(font) {
    return this.listInstalled([font]).length > 0;
  };

  LocalFonts.prototype.candidateFonts = ['Academy Engraved', 'Adobe Caslon Pro', 'Adobe Garamond Pro', 'Adobe Gothic Std', 'Agency FB', 'Algerian', 'American Typewriter', 'Andale Mono', 'Apple Chancery', 'Arial', 'Arial Black', 'Arial Narrow', 'Arial Rounded Bold', 'Arial Rounded MT Bold', 'Baskerville', 'Baskerville Old Face', 'Bauhaus 93', 'Bell MT', 'Berlin Sans FB', 'Bernard MT Condensed', 'Big Caslon', 'Birch Std', 'Bitstream Charter', 'Blackadder ITC', 'Blackoak Std', 'Bodoni 72 Oldstyle', 'Bodoni 72 Smallcaps', 'Bodoni MT', 'Book Antiqua', 'Bookman Old Style', 'Bradley Hand', 'Bradley Hand ITC', 'Britannic Bold', 'Broadway', 'Brush Script', 'Brush Script MT Italic', 'Calibri', 'Californian FB', 'Calisto MT', 'Cambria', 'Candara', 'Castellar', 'Centaur', 'Century', 'Century Gothic', 'Century Schoolbook', 'Century Schoolbook L', 'Chalkboard', 'Chalkduster', 'Chaparral Pro', 'Charcoal', 'Charcoal CY', 'Charlemagne Std', 'Chicago', 'Chiller', 'Cochin', 'Colonna MT', 'Comic Sans MS', 'Consolas', 'Constantia', 'Cooper', 'Cooper Black', 'Cooper Std', 'Copperplate', 'Copperplate Gothic Light', 'Corbel', 'Courier', 'Courier 10 Pitch', 'Courier New', 'Curlz MT', 'Deja Vu Sans Mono', 'DejaVu Sans', 'DejaVu Serif', 'Didot', 'Edwardian Script ITC', 'Elephant', 'Engravers MT', 'Eras Medium ITC', 'Felix Titling', 'Footlight MT Light', 'Forte', 'Franklin Gothic Medium', 'FreeMono', 'FreeSans', 'FreeSerif', 'Freestyle Script', 'French Script MT', 'Futura', 'Gabriola', 'Garamond', 'Geneva', 'Georgia', 'Giddyup Std', 'Gigi', 'Gill Sans', 'Gill Sans MT', 'Gloucester MT Extra Condensed', 'Goudy Old Style', 'Goudy Stout', 'Haettenschweiler', 'Harlow Solid Italic', 'Harrington', 'Helvetica', 'Helvetica Neue', 'Herculanum', 'High Tower Text', 'Hobo Std', 'Hoefler Text', 'Impact', 'Imprint MT Shadow', 'Informal Roman', 'Jokerman', 'Juice ITC', 'Kristen', 'Kunstler Script', 'Letter Gothic', 'Letter Gothic Std', 'Liberation Mono', 'Liberation Sans', 'Lithos Pro', 'Lucida Bright', 'Lucida Calligraphy', 'Lucida Console', 'Lucida Fax', 'Lucida Grande', 'Lucida Handwriting', 'Lucida Sans Typewriter', 'Lucida Sans Unicode', 'Magneto Bold', 'Maiandra GD', 'Marker Felt', 'Matura MT Script Capitals', 'Menlo', 'Mesquite Std', 'Microsoft Sans Serif', 'Minion Pro', 'Mistral', 'Modern No. 20', 'Monaco', 'Monotype Corsiva', 'Myriad Pro', 'Niagara Engraved', 'Niagara Solid', 'Nimbus Mono L', 'Nimbus Roman No9 L', 'Nimbus Sans L', 'Noteworthy', 'Nueva Std', 'OCR A Extended', 'OCRA Std', 'Old English Text MT', 'Optima', 'Orator Std', 'PT Sans', 'Palace Script MT', 'Palatino', 'Palatino Linotype', 'Papyrus', 'Perpetua', 'Perpetua Titling MT Light', 'Playbill', 'Poor Richard', 'Poplar Std', 'Prestige Elite Std', 'Pristina', 'Rage Italic', 'Ravie', 'Roboto', 'Rockwell', 'Rosewood Std Regular', 'Script MT Bold', 'Segoe Print', 'Segoe Script', 'Segoe UI', 'Skia', 'Snell Roundhand', 'Source Sans Pro', 'Stencil', 'Stencil Std', 'Tahoma', 'Tekton Pro Bold', 'Times', 'Times New Roman', 'Trajan Pro', 'Trebuchet MS', 'Tw Cen MT', 'URW Bookman L', 'URW Chancery L', 'URW Gothic L', 'URW Palladio L', 'Ubuntu', 'Verdana', 'Viner Hand', 'Vivaldi Italic', 'Vladimir Script', 'Wide Latin', 'Zapf Chancery', 'Zapfino'];

  return LocalFonts;

})();

//# sourceMappingURL=getfonts.js.map
